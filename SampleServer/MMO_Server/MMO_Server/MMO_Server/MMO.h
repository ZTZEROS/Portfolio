#pragma once

enum MMO_CLIENT_LOCAL_CONSTANT
{
	MMO_CLIENT_SET_SIZE = 64,
	MMO_CLIENT_SET_COUNT = 256,
	MMO_CLIENT_COUNT = MMO_CLIENT_SET_SIZE * MMO_CLIENT_SET_COUNT,

	MMO_CLIENT_PLAYER_KEY_LENGTH = 64,
	MMO_CLIENT_PLAYER_MESSAGE_LENGTH = 256
};

enum MMO_SERVER_LOCAL_CONSTANT
{
	MMO_SERVER_WSA_BUFFER_COUNT = 256,
	MMO_SERVER_CLIENT_RECEIVE_LOOP_COUNT = 256,
	MMO_SERVER_CLIENT_SEND_QUEUE_COUNT = MMO_SERVER_CLIENT_RECEIVE_LOOP_COUNT,

	MMO_SERVER_INDEX = 2
};

enum MMO_SERVER_SUB_THREAD_INDEX
{
	MMO_SERVER_SUB_THREAD_ACCEPT,
	//MMO_SERVER_SUB_THREAD_CONNECT,
	MMO_SERVER_SUB_THREAD_DISCONNECT,

	//MMO_SERVER_SUB_THREAD_RECEIVE,
	MMO_SERVER_SUB_THREAD_SEND,
	//MMO_SERVER_SUB_THREAD_PROCESS_RECEIVED_PACKET,
	//MMO_SERVER_SUB_THREAD_PROCESS_SENDING_PACKET,
	//MMO_SERVER_SUB_THREAD_UPDATE,
	
	MMO_SERVER_SUB_THREAD_AUTHORIZE,
	MMO_SERVER_SUB_THREAD_GAME,
	
	//MMO_SERVER_SUB_THREAD_WORK1,
	//MMO_SERVER_SUB_THREAD_WORK2,
	//MMO_SERVER_SUB_THREAD_WORK3,
	//MMO_SERVER_SUB_THREAD_WORK4,
	//MMO_SERVER_SUB_THREAD_WORK5,
	//MMO_SERVER_SUB_THREAD_WORK6,

	MMO_SERVER_SUB_THREAD_COUNT
};

enum MMO_CLIENT_PHASE_INDEX
{
	MMO_CLIENT_PHASE_ACCEPT,
	MMO_CLIENT_PHASE_CONNECT,

	MMO_CLIENT_PHASE_RECEIVE,
	MMO_CLIENT_PHASE_UPDATE,
	MMO_CLIENT_PHASE_SEND,

	MMO_CLIENT_PHASE_AUTHORIZE,
	MMO_CLIENT_PHASE_FROM_AUTHORIZE_TO_GAME,
	
	MMO_CLIENT_PHASE_GAME,
	MMO_CLIENT_PHASE_FROM_GAME_TO_AUTHORIZE,

	MMO_CLIENT_PHASE_FROM_AUTHORIZE_TO_DISCONNECT,
	MMO_CLIENT_PHASE_FROM_GAME_TO_DISCONNECT,
	MMO_CLIENT_PHASE_WAIT_FOR_DISCONNECT,
	MMO_CLIENT_PHASE_DISCONNECT,

	MMO_CLIENT_PHASE_COUNT
};

enum MMO_CLIENT_REQUEST_INDEX
{
	MMO_CLIENT_REQUEST_AUTHORIZE_LOGIN = 1001,

	MMO_CLIENT_REQUEST_GAME_ECHO = 5000,
	MMO_CLIENT_REQUEST_GAME_HEARTBEAT = 5002, //ALIVE_SIGNAL

	MMO_CLIENT_REQUEST_COUNT
};

enum MMO_SERVER_RESPONSE_INDEX
{
	MMO_CLIENT_RESPONSE_AUTHORIZE_LOGIN = 1002,

	MMO_CLIENT_RESPONSE_GAME_ECHO = 5001,
	MMO_CLIENT_RESPONSE_GAME_HEARTBEAT = 5002, //ALIVE_SIGNAL

	MMO_CLIENT_RESPONSE_COUNT
};

enum MMO_SERVER_LOGIN_STATUS_INDEX
{
	MMO_SERVER_LOGIN_STATUS_NONE = -1,
	MMO_SERVER_LOGIN_STATUS_FAILURE,
	MMO_SERVER_LOGIN_STATUS_SUCCESS,
	MMO_SERVER_LOGIN_STATUS_GAME,
	MMO_SERVER_LOGIN_STATUS_NO_ACCOUNT,
	MMO_SERVER_LOGIN_STATUS_NO_SESSION,
	MMO_SERVER_LOGIN_STATUS_NO_STATUS,
	MMO_SERVER_LOGIN_STATUS_NO_SERVER,

	MMO_SERVER_LOGIN_STATUS_COUNT = 8,
};

enum MONITOR_CLIENT_REQUEST_INDEX
{
	MONITOR_CLIENT_REQUEST_LOGIN = 25001,

	MONITOR_CLIENT_REQUEST_COUNT
};

enum MONITOR_SERVER_REQUEST_INDEX
{
	MONITOR_SERVER_REQUEST_LOGIN = 20001,
	MONITOR_SERVER_REQUEST_UPDATE = 20002,

	MONITOR_SERVER_REQUEST_COUNT
};

enum MONITOR_SERVER_RESPONSE_INDEX
{
	MONITOR_SERVER_RESPONSE_CLIENT_LOGIN = 25002,
	MONITOR_SERVER_RESPONSE_CLIENT_UPDATE = 25003,

	MONITOR_SERVER_RESPONSE_COUNT
};

enum MONITOR_UPDATE_INDEX
{
	MONITOR_UPDATE_TOTAL_SERVER_CPU_USAGE = 1,
	MONITOR_UPDATE_TOTAL_SERVER_AVAILABLE_MEMORY,
	MONITOR_UPDATE_TOTAL_SERVER_ETHERNET_RECEIVED_SIZE, //NETWORK_RECEIVED_SIZE //RECEIVED_SIZE
	MONITOR_UPDATE_TOTAL_SERVER_ETHERNET_SENDED_SIZE,
	MONITOR_UPDATE_TOTAL_SERVER_NONPAGED_MEMORY,

	MONITOR_UPDATE_MATCH_SERVER_ON,
	MONITOR_UPDATE_MATCH_SERVER_TOTAL_CPU_USAGE,
	MONITOR_UPDATE_MATCH_SERVER_MEMORY_USER_COMMIT, //PrivateByte
	MONITOR_UPDATE_MATCH_SERVER_PACKET_POOL_USAGE,
	MONITOR_UPDATE_MATCH_SERVER_SESSION_COUNT,
	MONITOR_UPDATE_MATCH_SERVER_PLAYER_COUNT,
	MONITOR_UPDATE_MATCH_SERVER_CURRET_MATCH_SUCCESS_COUNT,

	MONITOR_UPDATE_MASTER_SERVER_ON,
	MONITOR_UPDATE_MASTER_SERVER_PROCESS_CPU_USAGE,
	MONITOR_UPDATE_MASTER_SERVER_TOTAL_CPU_USAGE,
	MONITOR_UPDATE_MASTER_SERVER_MEMORY_USER_COMMIT,
	MONITOR_UPDATE_MASTER_SERVER_PACKET_POOL_USAGE,
	MONITOR_UPDATE_MASTER_SERVER_MATCH_SERVER_CONNECTION_COUNT,
	MONITOR_UPDATE_MASTER_SERVER_MATCH_SERVER_LOGIN_COUNT,
	MONITOR_UPDATE_MASTER_SERVER_WAITING_PLAYER_COUNT,
	MONITOR_UPDATE_MASTER_SERVER_BATTLE_SERVER_CONNECTION_COUNT,
	MONITOR_UPDATE_MASTER_SERVER_BATTLE_SERVER_LOGIN_COUNT,
	MONITOR_UPDATE_MASTER_SERVER_BATTLE_SERVER_STANDBY_ROOM_COUNT,

	MONITOR_UPDATE_BATTLE_SERVER_ON,
	MONITOR_UPDATE_BATTLE_SERVER_TOTAL_CPU_USAGE,
	MONITOR_UPDATE_BATTLE_SERVER_MEMORY_USER_COMMIT,
	MONITOR_UPDATE_BATTLE_SERVER_PACKET_POOL_USAGE,
	MONITOR_UPDATE_BATTLE_SERVER_CURRENT_AUTHORIZE_THREAD_LOOP_COUNT,
	MONITOR_UPDATE_BATTLE_SERVER_CURRENT_GAME_THREAD_LOOP_COUNT,
	MONITOR_UPDATE_BATTLE_SERVER_TOTAL_SESSION_COUNT,
	MONITOR_UPDATE_BATTLE_SERVER_AUTHORIZING_SESSION_COUNT,
	MONITOR_UPDATE_BATTLE_SERVER_GAMING_SESSION_COUNT,
	MONITOR_UPDATE_BATTLE_SERVER_PLAYER_COUNT,
	MONITOR_UPDATE_BATTLE_SERVER_WAITING_ROOM_COUNT,
	MONITOR_UPDATE_BATTLE_SERVER_PLAYING_ROOM_COUNT,

	MONITOR_UPDATE_CHAT_SERVER_ON,
	MONITOR_UPDATE_CHAT_TOTAL_CPU_USAGE,
	MONITOR_UPDATE_CHAT_MEMORY_USER_COMMIT,
	MONITOR_UPDATE_CHAT_PACKET_POOL_USAGE,
	MONITOR_UPDATE_CHAT_SESSION,
	MONITOR_UPDATE_CHAT_PLAYER_COUNT,
	MONITOR_UPDATE_CHAT_ROOM_COUNT
};

struct MMO_ServerSession : public ServerSession
{
	OVERLAPPED OverlappedReceive;
	OVERLAPPED OverlappedSend;

	ByteQueue ReceiveBQ;
	ByteQueue SendBQ;

	SerialByteQueue CommandSBQ;
	//LockFreeQueue<MMO_Work> CommandLFQ; //WorkLFQ;

	SRWLOCK Lock;
};

struct MMO_ClientSession : public ClientSession
{
	volatile unsigned int Disconnecting;
	volatile unsigned int FromAuthorizeToGame;

	OVERLAPPED OverlappedReceive;
	OVERLAPPED OverlappedSend;

	Queue<SerialPacketQueue<IOCP_PacketHeader>*> ReceiveQ; //ReceivePacketSPQ_AddressQ;
	Queue<SerialPacketQueue<IOCP_PacketHeader>*> SendQ; //SendPacketSPQ_AddressQ;

	//Queue<SerialPacketQueue<IOCP_PacketHeader>> ReceiveQ; //ReceivePacketSPQ_Q;
	//Queue<SerialPacketQueue<IOCP_PacketHeader>> SendQ; //SendPacketSPQ_Q;

	ByteQueue ReceiveBQ;
	ByteQueue SendBQ;

	volatile UINT IO_Count;
	//volatile UINT ReceiveCount;
	//volatile UINT SendCount;

	MMO_CLIENT_PHASE_INDEX CurrentPhase;

	SRWLOCK Lock;

	//UINT AccumulatedUseCount;
};

struct MMO_InnerClientServer
{
	UINT64 SessionKey;

	DWORD PreviousHeartbeatTime;

	SRWLOCK Lock;
};

struct MMO_InnerClientPlayer
{
	UINT64 SessionKey;
	UINT Index;

	BYTE DatumType;
	INT DatumValue;
	INT TimeStamp;

	DWORD PreviousHeartbeatTime;

	SRWLOCK Lock;
};

struct MMO_Work
{
	UINT64 SessionKey;
	SerialPacketQueue<IOCP_PacketHeader>* PacketSPQ_Address;
};