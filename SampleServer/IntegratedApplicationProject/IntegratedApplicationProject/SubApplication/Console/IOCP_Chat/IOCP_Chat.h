#pragma once

enum IOCP_CHAT_LOCAL_CONSTANT
{
	IOCP_CHAT_SERVER_PORT = 6000,

	IOCP_CHAT_CLIENT_SET_COUNT = 2,
	IOCP_CHAT_CLIENT_COUNT = 64,
	TOTAL_IOCP_CHAT_CLIENT_COUNT = IOCP_CHAT_CLIENT_SET_COUNT * IOCP_CHAT_CLIENT_COUNT,
};

enum IOCP_CHAT_SUB_THREAD_INDEX
{
	IOCP_CHAT_SUB_THREAD_ACCEPT,
	//IOCP_CHAT_SUB_THREAD_RECEIVE,
	//IOCP_CHAT_SUB_THREAD_SEND,
	//IOCP_CHAT_SUB_THREAD_PROCESS_RECEIVED_PACKET,
	//IOCP_CHAT_SUB_THREAD_PROCESS_SENDING_PACKET,
	IOCP_CHAT_SUB_THREAD_DISCONNECT,
	IOCP_CHAT_SUB_THREAD_WORK1,
	IOCP_CHAT_SUB_THREAD_WORK2,
	IOCP_CHAT_SUB_THREAD_WORK3,
	IOCP_CHAT_SUB_THREAD_WORK4,

	IOCP_CHAT_SUB_THREAD_COUNT
};

enum IOCP_CHAT_CLIENT_STEP_INDEX
{
	IOCP_CHAT_CLIENT_STEP_ACCEPT,
	IOCP_CHAT_CLIENT_STEP_RECEIVE,
	IOCP_CHAT_CLIENT_STEP_UPDATE,
	IOCP_CHAT_CLIENT_STEP_SEND,
	IOCP_CHAT_CLIENT_STEP_DISCONNECT,

	IOCP_CHAT_CLIENT_STEP_COUNT
};

enum IOCP_CHAT_CLIENT_PHASE_INDEX
{
	IOCP_CHAT_CLIENT_PHASE_ACCEPT,
	IOCP_CHAT_CLIENT_PHASE_RECEIVE,
	IOCP_CHAT_CLIENT_PHASE_UPDATE,
	IOCP_CHAT_CLIENT_PHASE_SEND,
	IOCP_CHAT_CLIENT_PHASE_DISCONNECT,

	IOCP_CHAT_CLIENT_PHASE_COUNT
};

enum IOCP_CHAT_SERVER_IOCP_INDEX
{

};

struct IOCP_ChatServer : public CommonSession
{
	OVERLAPPED OverlappedReceiving;
	OVERLAPPED OverlappedSending;

	ByteQueue ReceiveBQ;
	ByteQueue SendBQ;

	SerialByteQueue CommandSBQ;
};

struct IOCP_ChatClient : public CommonSession
{
	OVERLAPPED OverlappedReceive;
	OVERLAPPED OverlappedSend;

	ByteQueue ReceiveBQ;
	ByteQueue SendBQ;

	SerialByteQueue ReceiveSBQ;
	SerialByteQueue SendSBQ;

	IOCP_CHAT_CLIENT_STEP_INDEX CurrentStepIndex;

	UINT IO_Count;
	UINT ReceiveCount;
	UINT SendCount;

	SRWLOCK IOCP_ChatClientLock;
};

struct IOCP_ChatSubThread : public CommonSubThread
{

};


typedef vector<IOCP_ChatClient> IOCP_ChatClientV;
typedef vector<IOCP_ChatClient>::iterator IOCP_ChatClientVI;

typedef vector<IOCP_ChatSubThread> IOCP_ChatSubThreadV;
typedef vector<IOCP_ChatSubThread>::iterator IOCP_ChatSubThreadVI;